### A simple get request to the test endpoint. No need for login
GET {{url}}/api/auth/test/

### Create a new user - this one will only get a USER role by default
POST {{url}}/api/auth/register/

{
    "username": "test",
    "password": "test123"
}

###
POST {{url}}/api/auth/login/

#{
#    "username": "user456",
#    "password": "user123"
#}
{
    "username": "admin",
    "password": "tunesAdmin2024"
}

> {%
    client.global.set("jwt_token", response.body.token);
    console.log("JWT Token:", client.global.get("jwt_token"));
%}

###
GET {{url}}/api/protected/user_demo/
Accept: application/json
Authorization: Bearer {{jwt_token}}

###
GET {{url}}/api/protected/admin_demo/
Accept: application/json
Authorization: Bearer {{jwt_token}}

###ALL USERS
GET {{url}}/api/info/users/
Accept: application/json
Authorization: Bearer {{jwt_token}}

###USER BY NAME
GET {{url}}/api/info/users/admin
Accept: application/json
Authorization: Bearer {{jwt_token}}

###UPDATE USER
PUT {{url}}/api/info/users/admin/update_info
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "username": "admin",
  "password": "$2a$10$tk358v/JLG9U27j5zlHtp.XGSo9ptYWQBYpNHT6NB1vJM5ZwBubZ.",
  "roles": [
    "ADMIN",
    "USER"
  ],
  "comments": [
    {
      "id": 3,
      "message": "comment 1"
    },
    {
      "id": 4,
      "message": "comment 2"
    },
    {
      "id": 5,
      "message": "comment 3"
    },
    {
      "message": "comment 4, the test"
    }
  ],
  "badges": [
    {
      "id": 3,
      "name": "test",
      "description": "words"
    },
    {
      "id": 4,
      "name": "admin",
      "description": "be admin"
    },
    {
      "id": 5,
      "name": "thing",
      "description": "actual test description"
    }
  ],
  "stats": {
    "id": 2,
    "artistLeaderboardPlacement": null,
    "albumLeaderboardPlacement": null,
    "songLeaderboardPlacement": null,
    "artistCorrectGuesses": null,
    "albumCorrectGuesses": null,
    "songCorrectGuesses": null,
    "correctGuesses": 3,
    "artistAverageGuessAmount": null,
    "albumAverageGuessAmount": null,
    "songAverageGuessAmount": null,
    "averageGuessAmount": null,
    "artistRoundsPlayed": null,
    "albumRoundsPlayed": null,
    "songRoundsPlayed": null,
    "roundsPlayed": 5
  }
}


### Add a new artist
POST {{url}}/api/artists
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "name": "Sire Bean",
  "type": "artist"
}

### Add album to artist (EXPERIMENTAL METHOD)
POST {{url}}/api/artists/add_album
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "artistId": 3,
  "albumId": 4
}

### Retrieve all artists
GET {{url}}/api/artists

### Retrieve all albums
GET {{url}}/api/albums

### Retrieve all songs
GET {{url}}/api/songs

### Retrieve album by id
GET {{url}}/api/albums/1
Accept: application/json
Authorization: Bearer {{jwt_token}}

### Add a new album
POST {{url}}/api/albums
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "name": "Gallicanae",
  "type": "album"
}

###
PUT {{url}}/api/albums/3
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "name": "test",
  "type": "album"
}

###
DELETE {{url}}/api/albums/2
Authorization: Bearer {{jwt_token}}